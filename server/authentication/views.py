from rest_framework.views import APIView
from rest_framework.response import Response
from authentication.serializers import UserSerializer
from authentication.models import User
from rest_framework.exceptions import AuthenticationFailed
import jwt, datetime
from authentication.rsa_algorithm import RSA_private_key, RSA_public_key

# view for registration
class RegisterView(APIView):
    def post(self, request, format=None):
        serializer = UserSerializer(data = request.data)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(serializer.data, status = 200)

# view for login
class LoginView(APIView):
    def post(self, request, format=None):
        email = request.data['email']
        password = request.data['password']

        # getting the logging user
        user = User.objects.filter(email = email).first()
        
        # if user is not there in the database through error
        if user is None:
            raise AuthenticationFailed("User not Found !")
        
        # if password dont match through error
        if not user.check_password(password):
            raise AuthenticationFailed("Incorrect Password")

        # creating payload dictionary for jwt token
        payload = {
            'email': user.email,
            # expiry time of the token
            'exp':datetime.datetime.utcnow()+ datetime.timedelta(days=7),
            # activated time of the token
            'iat':datetime.datetime.utcnow()
        }

        # encoding jwt private key using RS512 algorithm
        # other option of algorithm are : 
        #         RS256
        #         RS1048 etc
        token = jwt.encode(payload, RSA_private_key(), algorithm="RS512")

        # creating a response object
        response = Response()
        # set the token as cookie in response object
        response.set_cookie(key='jwt_token', value=token, httponly= True)
        # adding token in response data
        response.data = {
            "token":token,
            "status": 200
        }
        return response


# view for getting authenticated user
class UserView(APIView):
    def get(self, request, format=None):
        # fetching token from set cookies
        token = request.COOKIES.get('jwt_token')

        # if there is no token in the cookie raise Exception unauthenticated
        if not token:
            raise AuthenticationFailed("Unauthenticated")
        
        # if there is token try to decode the token
        try:

            """ Here RSA_public_key () is a function which is defined in the rsa_alogrithm.py file.
                this function return the public key generated by RSA algorithm """

            payload = jwt.decode(token, RSA_public_key(), algorithms=["RS512"])
        # if enable to decode through exception
        except jwt.ExpiredSignatureError:
            raise AuthenticationFailed("Unauthenticated")

        # feching the authenticated user using payload['email'] data of token 
        user = User.objects.filter(email = payload['email']).first()
        # serialzing into json
        serializer = UserSerializer(user)
        return Response(serializer.data, status = 200)

# view for logout
class LogoutView(APIView):
    def post(self, request, format=None):
        response = Response()
        # deleting the jwt_token cookies
        response.delete_cookie('jwt_token')
        # return message successfully Logout
        response.data = {
            "message":"Successfully Logout",
            "status": 200
        }
        return response